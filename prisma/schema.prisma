// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Team {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaces Workspace[]
  members    TeamMembership[]
  forms      Form[]

  @@map("teams")
}

model Workspace {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(255)
  desc       String?
  teamId     String
  team       Team     @relation(fields: [teamId], references: [id])
  inviteCode String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // projects Project[]
  forms Form[]

  @@map("workspaces")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  // permissions PermissionType[]
  memberships TeamMembership[] // Update to use TeamMembership

  @@index([name])
  @@map("roles")
}

model TeamMembership {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  teamId   String
  team     Team     @relation(fields: [teamId], references: [id])
  joinedAt DateTime @default(now())
  roleId   String
  role     Role     @relation(fields: [roleId], references: [id])

  @@map("team_memberships")
}

model User {
  id              String           @id @default(cuid())
  user_id         String           @unique
  email           String           @unique
  apiKey          String           @unique @default(cuid())
  subscription    String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // projects        Project[]
  forms           Form[]
  teamMemberships TeamMembership[] // Update to use TeamMembership

  @@index([email, apiKey])
  @@map("users")
}

model Form {
  id                String    @id @default(cuid())
  title             String    @default("Untitled")
  description       String    @default("")
  fields            Json?     @default("[]") // Stores field definitions as JSON
  settings          Json? // Optional, for themes or additional configurations
  isPublished       Boolean   @default(false)
  visits            Int       @default(0)
  submissions_count Int       @default(0)
  shareURL          String    @unique @default(uuid())
  createdById       String
  createdBy         User      @relation(fields: [createdById], references: [id])
  workspaceId       String
  workspace         Workspace @relation(fields: [workspaceId], references: [id])
  teamId            String
  team              Team      @relation(fields: [teamId], references: [id])
  isArchived        Boolean   @default(false)
  closeFormDate     DateTime?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  submissions Submission[]

  @@map("forms")
}

model Submission {
  id          String   @id @default(cuid())
  data        Json     @default("{}") // Contains the JSONStringified form submission
  submittedAt DateTime @default(now())
  formId      String
  form        Form     @relation(fields: [formId], references: [id])

  @@map("submissions")
}
